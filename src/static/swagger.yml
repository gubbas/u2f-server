swagger: "2.0"
info:
  description: "This is a multi-factor authentication server. It supports single use backup-codes, one-time passwords (totp) and hardware tokens."
  version: "1.1.0"
  title: "U2F Server Microservice"
host: "api.example.com"
tags:
  - name: "key"
    description: "Hardware Tokens"
    externalDocs:
      description: "fido"
      url: "https://tinyurl.com/ycpjck7w"
  - name: "otp"
    description: "One-Time Passwords"
    externalDocs:
      description: "wiki"
      url: "https://tinyurl.com/y84ns7ju"
  - name: "code"
    description: "Backup Codes"
    externalDocs:
      description: "google support"
      url: "https://tinyurl.com/ycd9ahxe"


paths:

  /status:
    get:
      operationId: "mfaStatus"
      summary: "Check MFA Methods"
      description: "Lookup Configured MFA Methods AND get any/all U2F challenges necessary to generate a U2F response."

      parameters:
        - name: "appId"
          in: "query"
          description: "User facing application id (FQDN)"
          required: true
          type: "string"
        - name: "account"
          in: "query"
          description: "account handle, uuid, primary key"
          required: true
          type: "string"
        - name: "secret"
          in: "query"
          description: "Secret used to salt u2fId in API Database"
          type: "string"


      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"

  /logs:
    get:
      operationId: "mfaLogs"
      summary: "MFA Access Logs"
      description: "Get records for all authentication attempts (success & failure)"

      parameters:
        - name: "appId"
          in: "query"
          description: "User facing application id (FQDN)"
          required: true
          type: "string"
        - name: "account"
          in: "query"
          description: "account handle, uuid, primary key"
          required: true
          type: "string"
        - name: "secret"
          in: "query"
          description: "Secret used to salt u2fId in API Database"
          type: "string"

      
      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"

  /key/register:
    post:
      operationId: "keyRegisterStart"
      tags:
      - "key"
      summary: "Start Key Registration"
      description: "some description"

      parameters:
        - in: "body"
          name: "body"
          description: "zzzzz"
          required: true
          schema:
            $ref: "#/definitions/BasicUserInfo"      

      
      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"

  /key/register/finish:
    post:
      operationId: "keyRegisterFinish"
      tags:
      - "key"
      summary: "Finish Key Registration"
      description: "some description"

      parameters:
        - in: "body"
          name: "body"
          description: "zzzzz"
          required: true
          schema:
            $ref: "#/definitions/keyRegisterFinish"      

      
      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"

  /key/remove:
    delete:
      operationId: "keyRemove"
      tags:
      - "key"
      summary: "Remove Registrated Key"
      description: "Using a registered key's uuid, remove the device from a users account."

      parameters:
        - in: "body"
          name: "body"
          description: "Method for removing registered U2F key from users account."
          required: true
          schema:
            $ref: "#/definitions/uuidRemove"      


      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"

  /key/authenticate:
    post:
      operationId: "keyAuthenticateStart"
      tags:
      - "key"
      summary: "Start Key Authentication"
      description: "Generate U2F challenges for all registered U2F hardware tokens."
      
      parameters:
        - in: "body"
          name: "body"
          description: "zzzzz"
          required: true
          schema:
            $ref: "#/definitions/BasicUserInfo"      
      
      
      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"

  /key/authenticate/finish:
    post:
      operationId: "keyAuthenticateFinish"
      tags:
      - "key"
      summary: "Finish Key Authentication"
      description: "Verify the response generated by the U2F hardware token."

      parameters:
        - in: "body"
          name: "body"
          description: "zzzzz"
          required: true
          schema:
            $ref: "#/definitions/keyAuthenticateFinish"      

      
      
      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"

  /otp/register:
    post:
      operationId: "otpRegisterStart"
      tags:
      - "otp"
      summary: "Start OTP Registration"
      description: "Generate a secret and send it as a payload I can display as a QR Code."

      parameters:
        - in: "body"
          name: "body"
          description: "Basic info needed to identify a users unique account."
          required: true
          schema:
            $ref: "#/definitions/BasicUserInfo"      

      
      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"

  /otp/register/finish:
    post:
      operationId: "otpRegisterFinish"
      tags:
      - "otp"
      summary: "Start OTP Registration"
      description: "Verify that the response code was generated using the secret."

      parameters:
        - in: "body"
          name: "body"
          description: "Basic info needed to identify a users unique account AND token generated by a OTP device with the last generated secret."
          required: true
          schema:
            $ref: "#/definitions/otpRegisterFinish"      


      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"

  /otp/remove:
    delete:
      operationId: "otpRemove"
      tags:
      - "otp"
      summary: "Remove Registrated OTP Device"
      description: "Using a registered devices's uuid, remove the device from a users account."

      parameters:
        - in: "body"
          name: "body"
          description: "Method for removing registered OTP Device from users account."
          required: true
          schema:
            $ref: "#/definitions/uuidRemove"      

      
      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"

  /otp/authenticate:
    get:
      operationId: "otpAuthenticate"
      tags:
      - "otp"
      summary: "Authenticate"
      description: "Verify that the token provided was generated using any of the secrets I have stored in registered OTP devices."


      parameters:
        - name: "appId"
          in: "query"
          description: "User facing application id (FQDN)"
          required: true
          type: "string"
        - name: "account"
          in: "query"
          description: "account handle, uuid, primary key"
          required: true
          type: "string"
        - name: "secret"
          in: "query"
          description: "Secret used to salt u2fId in API Database"
          type: "string"
        - name: "token"
          in: "query"
          description: "OTP Token Generated by Device using stored secret"
          required: true
          type: "string"
      
      
      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"

  /code/issue:
    post:
      operationId: "codeRegister"
      tags:
      - "code"
      summary: "Issue"
      description: "Issue a batch of single-use backup codes"

      parameters:
        - in: "body"
          name: "body"
          description: "Basic info needed to identify a users unique account."
          required: true
          schema:
            $ref: "#/definitions/BasicUserInfo"      

      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"

  /code/authenticate:
    get:
      operationId: "codeAuthenticate"
      tags:
      - "code"
      summary: "Authenticate"
      description: "Verify that the code provided has been issued to my account."

      parameters:
        - name: "appId"
          in: "query"
          description: "User facing application id (FQDN)"
          required: true
          type: "string"
        - name: "account"
          in: "query"
          description: "account handle, uuid, primary key"
          required: true
          type: "string"
        - name: "secret"
          in: "query"
          description: "Secret used to salt u2fId in API Database"
          type: "string"
        - name: "code"
          in: "query"
          description: "Issued Backup Code"
          required: true
          type: "string"

      
      responses:
        200:
          description: "successful operation"
        400:
          description: "somekind of error"




definitions:
  BasicUserInfo:
    type: "object"
    required:
      - "appId"
      - "account"
    properties:
      appId:
        type: "string"
        description: "User facing application id (FQDN)"
        example: "https://example.com"
      account:
        type: "string"
        description: "handle, uuid, account primary key"
        example: "superman"
      secret:
        type: "string"
        description: "Secret used to salt u2fId in API Database"
        example: ""
  otpRegisterFinish:
    type: "object"
    required:
      - "appId"
      - "account"
      - "secret"
      - "token"
    properties:
      appId:
        type: "string"
        description: "User facing application id (FQDN)"
        example: "https://example.com"
      account:
        type: "string"
        description: "handle, uuid, account primary key"
        example: "superman"
      secret:
        type: "string"
        description: "Secret used to salt u2fId in API Database"
        example: ""
      token:
        type: "string"
        description: "otp generated token"
      nickname:
        type: "string"
        description: "Nickname for OTP device"
        example: ""

  uuidRemove:
    type: "object"
    required:
      - "appId"
      - "account"
      - "secret"
      - "uuid"
    properties:
      appId:
        type: "string"
        description: "User facing application id (FQDN)"
        example: "https://example.com"
      account:
        type: "string"
        description: "handle, uuid, account primary key"
        example: "superman"
      secret:
        type: "string"
        description: "Secret used to salt u2fId in API Database"
        example: ""
      uuid:
        type: "string"
        description: "uuid for registered OTP Device or U2F Hardware Token"
        example: ""

  keyRegisterFinish:
    type: "object"
    required:
      - "appId"
      - "account"
      - "secret"
      - "registrationResponse"
    properties:
      appId:
        type: "string"
        description: "User facing application id (FQDN)"
        example: "https://example.com"
      account:
        type: "string"
        description: "handle, uuid, account primary key"
        example: "superman"
      secret:
        type: "string"
        description: "Secret used to salt u2fId in API Database"
        example: ""
      registrationResponse:
        description: "registrationResponse object"
        $ref: "#/definitions/registrationResponse"      
        
      nickname:
        type: "string"
        description: "Nickname for OTP device"
        example: ""


  registrationResponse:
    type: "object"
    description: "Response generated by U2F device using u2f-api.js"
    required:
      - "registrationData"
      - "version"
      - "appId"
      - "challenge"
      - "clientData"
    properties:
      registrationData:
        type: "string"
      version:
        type: "string"
      appId:
        type: "string"
        description: "User facing application id (FQDN)"
      challenge:
        type: "string"
      clientData:
        type: "string"
        description: "string"

  keyAuthenticateFinish:
    type: "object"
    required:
      - "appId"
      - "account"
      - "secret"
      - "registrationResponse"
    properties:
      appId:
        type: "string"
        description: "User facing application id (FQDN)"
        example: "https://example.com"
      account:
        type: "string"
        description: "handle, uuid, account primary key"
        example: "superman"
      secret:
        type: "string"
        description: "Secret used to salt u2fId in API Database"
        example: ""
      authResponse:
        description: "registrationResponse object"
        $ref: "#/definitions/authenticationResponse"

  authenticationResponse:
    type: "object"
    description: "Authentication Response generated by U2F device using u2f-api.js and challenge received from API"
    required:
      - "keyHandle"
      - "clientData"
      - "signatureData"
    properties:
      keyHandle:
        type: "string"
      clientData:
        type: "string"
      signatureData:
        type: "string"



externalDocs:
    description: "Source on Github"
    url: "https://github.com/sudowing/u2f-server"

